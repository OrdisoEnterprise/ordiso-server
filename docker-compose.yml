x-superset-image: &superset-image apachesuperset.docker.scarf.sh/apache/superset:${TAG:-latest}
x-superset-depends-on: &superset-depends-on
  # - db
  # - ordiso_db_postgres
  - ordiso-superset-redis
x-superset-volumes:
  &superset-volumes # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker/superset:/app/docker
  - ./data/volumes/ordiso-superset-data/app/superset_home:/app/superset_home


services:

  ordiso-homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: ordiso-homepage
    restart: unless-stopped
    volumes:
      - ./data/volumes/ordiso-homepage:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ordiso-public
      - ordiso-internal


  ordiso_nginx_manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    container_name: ordiso_nginx_manager
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
      - '33040:33040'
    volumes:
      - ./data/volumes/ordiso-nginx-manager-data/data:/data
      - ./data/volumes/ordiso-nginx-manager-data/letsencrypt:/etc/letsencrypt
      - ./data/volumes/ordiso-nginx-manager-data/snippets:/snippets
    networks:
      - ordiso-internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      TZ: 'Europe/Madrid'


  ordiso-vaultwarden:
    image: vaultwarden/server:latest
    container_name: ordiso-vaultwarden
    restart: always
    networks:
      - ordiso-internal
    volumes:
      - ./data/volumes/ordiso-bitwarden-data/data:/data
    environment:
      WEBSOCKET_ENABLED: 'true' # Required to use websockets
      SIGNUPS_ALLOWED: 'true'   # set to false to disable signups
      PUSH_ENABLED: ${PUSH_ENABLED:-'true'} # set to false to disable push notifications
      PUSH_INSTALLATION_ID: ${PUSH_INSTALLATION_ID:-''} # set to a unique value to enable push notifications
      PUSH_INSTALLATION_KEY: ${PUSH_INSTALLATION_KEY:-''} # set to a unique value to enable push notifications
      PUSH_RELAY_BASE_URI: https://push.bitwarden.com

  ordiso_adminer:
    image: adminer
    restart: always
    container_name: ordiso_adminer
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ordiso-internal


  ordiso_docs:
    image: ubuntu:latest
    container_name: ordiso_docs
    restart: always
    environment:
      DOCUMENTATION_ROOT_DIR: "/docs"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ordiso-internal
    volumes:
        - ./docs:/docs
        - ./tools:/tools
    command: bash -c "cd /tools && ./docs-server.sh"


  ordiso_db_mysql:
    image: mysql:8.0
    container_name: ordiso_db_mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ordiso
      MYSQL_USER: ordiso
      MYSQL_PASSWORD: ordiso
      MYSQL_ROOT_HOST: "%"
    ports:
      - "33050:3306"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./tmp/backups/ordiso.db:/docker-entrypoint-initdb.d
      - ./data/volumes/ordiso-db-mysql-data/var/lib/mysql:/var/lib/mysql
    networks:
      - ordiso-internal
      

  ordiso_db_postgres:
    image: postgres:14
    container_name: ordiso_db_postgres
    restart: always
    user: 1000:1000
    environment:
      # POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
    ports:
      - "127.0.0.1:54320:5432"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      # - ./tmp/backups/ordiso.superset:/docker-entrypoint-initdb.d
      - ./data/volumes/ordiso-db-postgres-data/var/lib/postgresql/data:/var/lib/postgresql/data
    networks:
      - ordiso-internal


  ordiso_pypi_server:
    image: pypiserver/pypiserver:latest
    container_name: ordiso_pypi_server
    volumes:
      - ./data/volumes/ordiso-pypi-server-data/data/packages:/data/packages
    command: -P . -a . /data/packages
    restart: always
    networks:
      - ordiso-internal


  ordiso_superset:
    env_file: docker/superset/.env
    image: *superset-image
    container_name: ordiso_superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    networks:
      - ordiso-internal


  ordiso-superset-worker:
    image: *superset-image
    container_name: ordiso_superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: docker/superset/.env
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    networks:
      - ordiso-internal


  ordiso-superset-worker-beat:
    image: *superset-image
    container_name: ordiso_superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: docker/superset/.env
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - ordiso-internal


  ordiso-superset-redis:
    image: redis:7
    container_name: ordiso_superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ordiso-internal


  ordiso-dns-server:
    image: ubuntu/bind9:latest
    container_name: ordiso-dns-server
    environment:
      - BIND9_USER=root
      - TZ=Europe/Madrid
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    volumes:
      - ./docker/bind9/config:/etc/bind
      - ./data/volumes/ordiso-dns-server/var/cache/bind:/var/cache/bind
      - ./data/volumes/ordiso-dns-server/var/records:/var/lib/bind
    restart: unless-stopped


  ordiso-dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: ordiso-dockerproxy
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
      - 2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    restart: unless-stopped
    networks:
      - ordiso-internal


  ordiso-authelia:
    container_name: 'ordiso-authelia'
    image: 'authelia/authelia'
    restart: 'unless-stopped'
    networks:
      - ordiso-internal
    volumes:
      - './data/volumes/ordiso-authelia-data/config:/config'
    environment:
      TZ: 'Europe/Madrid'


  ordiso-nextcloud:
    container_name: ordiso-nextcloud
    image: 'nextcloud'
    restart: 'always'
    ports:
      - '8025:443'
    volumes:
      - ./data/volumes/ordiso-nextcloud-data/data:/var/www/html
    environment:
      - MYSQL_PASSWORD=replace-with-secure-password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=ordiso-nextcloud-db
    networks:
      - ordiso-internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
  

  ordiso-nextcloud-db:
    image: mariadb
    container_name: ordiso-nextcloud-db
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - ./data/volumes/ordiso-nextcloud-db-data/data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=replace-with-secure-password
      - MYSQL_PASSWORD=replace-with-secure-password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    networks:
      - ordiso-internal


  ordiso-duplicati:
    image: ghcr.io/linuxserver/duplicati
    container_name: ordiso-duplicati
    environment:
      - PUID=0
      - PGID=0
      - TZ=Europe/Madrid
      # (optional) - CLI_ARGS=
    volumes:
      - ./data/volumes/ordiso-duplicati-data/config:/config
      - ./data/volumes:/source
      - /backups:/backups
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ordiso-internal


  ordiso-node-red:
    image: nodered/node-red:latest
    container_name: ordiso-node-red
    restart: always
    # ports:
    #   - '1880:1880'
    networks:
      - ordiso-internal
    # volumes:
    #   - ./data/volumes/ordiso-node-red-data:/data


volumes:
  ordiso-mysql-data:
    name: ordiso-mysql-data
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
  pypi-server:
    external: false


networks:
  ordiso-public:
    name: ordiso-public
    driver: bridge
  ordiso-internal:
    name: ordiso-internal
    driver: bridge
  
  